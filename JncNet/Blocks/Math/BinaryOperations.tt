<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Text;

namespace JncNet.Blocks.Math
{
<#
        var dte = (EnvDTE.DTE) ((IServiceProvider) this.Host)
                       .GetService(typeof(EnvDTE.DTE));
        var pathToNumbers = System.IO.Path.Combine(dte.ActiveDocument.Path, "..\\..\\Meta\\NumberTypes.xml");
        var pathToOperations = System.IO.Path.Combine(dte.ActiveDocument.Path, ".\\BinaryOperations.xml");

        var docNumbers = System.Xml.Linq.XDocument.Load(pathToNumbers);
        var docOperations = System.Xml.Linq.XDocument.Load(pathToOperations);
        foreach (var nodeOperation in docOperations.Root.Elements())
        {
            foreach (var node in docNumbers.Root.Elements())
            {
#>
    public class <#=nodeOperation.Element("name").Value #><#= node.Element("name").Value #> : IJncBlock
    {
        [JncIn(required:true)]
        public <#= node.Element("code").Value #> A { get; set; }

        [JncIn(required:true)]
        public <#= node.Element("code").Value #> B { get; set; }

        [JncOut(required:true)]
        public <#= node.Element("code").Value #> Result { get; set; }

        public void Execute()
        {
            <#= nodeOperation.Element("template").Value.Replace("{code}", node.Element("code").Value)#>
        }
    }
<#
            }
        }

#>
}
